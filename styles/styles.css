@charset "UTF-8";
/**
  Нормализация блочной модели
 */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/**
  Убираем внутренние отступы слева тегам списков,
  у которых есть атрибут class
 */
:where(ul, ol):where([class]) {
  padding-left: 0;
}

/**
  Убираем внешние отступы body и двум другим тегам,
  у которых есть атрибут class
 */
body,
:where(blockquote, figure):where([class]) {
  margin: 0;
}

/**
  Убираем внешние отступы вертикали нужным тегам,
  у которых есть атрибут class
 */
:where(h1,
h2,
h3,
h4,
h5,
h6,
p,
ul,
ol,
dl):where([class]) {
  margin-block: 0;
}

:where(dd[class]) {
  margin-left: 0;
}

:where(fieldset[class]) {
  margin-left: 0;
  padding: 0;
  border: none;
}

/**
  Убираем стандартный маркер маркированному списку,
  у которого есть атрибут class
 */
:where(ul[class]) {
  list-style: none;
}

/**
  Обнуляем вертикальные внешние отступы параграфа,
  объявляем локальную переменную для внешнего отступа вниз,
  чтобы избежать взаимодействие с более сложным селектором
 */
p {
  --paragraphMarginBottom: 24px;
  margin-block: 0;
}

/**
  Внешний отступ вниз для параграфа без атрибута class,
  который расположен не последним среди своих соседних элементов
 */
p:where(:not([class]):not(:last-child)) {
  margin-bottom: var(--paragraphMarginBottom);
}

/**
  Упрощаем работу с изображениями
 */
img {
  display: block;
  max-width: 100%;
}

/**
  Наследуем свойства шрифт для полей ввода
 */
input,
textarea,
select,
button {
  font: inherit;
}

html {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  height: 100%;
  /**
    Плавный скролл
   */
  scroll-behavior: smooth;
}

body {
  /**
    Пригодится в большинстве ситуаций
    (когда, например, нужно будет "прижать" футер к низу сайта)
   */
  min-height: 100%;
  /**
    Унифицированный интерлиньяж
   */
  line-height: 1.5;
}

/**
  Приводим к единому цвету svg-элементы
 */
svg *[fill] {
  fill: currentColor;
}

svg *[stroke] {
  stroke: currentColor;
}

/**
  Чиним баг задержки смены цвета при взаимодействии с svg-элементами
 */
svg * {
  transition-property: fill, stroke;
}

/**
  Удаляем все анимации и переходы для людей,
  которые предпочитают их не использовать
 */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
@font-face {
  font-family: "Space Grotesk";
  src: url("../fonts/SpaceGrotesk-Regular.woff2") format("woff2");
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}
@font-face {
  font-family: "Space Grotesk";
  src: url("../fonts/SpaceGrotesk-Medium.woff2") format("woff2");
  font-weight: 500;
  font-style: normal;
  font-display: swap;
}
/*
Прописываем в SCSS:

.element {
    padding-block: 100px;
    font-size: 36px;

    @include desktop { - обратились к @mixin который в свою очередь обратился к @media кторый обратился к @content, 
        padding-block: 50px;
        font-size: 18px;  
    }
}

Получаем в CSS:

.element {
  padding-block: 100px;
  font-size: 36px;
}
@media (max-width: 1280px) {
  .element {
    padding-block: 50px;
    font-size: 18px;
  }
}
*/
/*
button {
     background-color: lightseagreen;

    @include hover {
        background-color: lightcoral;     
}
}
*/
/*
$max and $min это аргументы кторые будут прописываться позже при @include,
48 и 16 значения по умолчанию, хоть и не указнны единицы, мы для себя подразумеваем что они в px 
для удобства в вычислениях. ообще перменную можно задать без значения по умолчанию (см. Последний mixin)
и уже когда будем применять mixin м укажем значение с единицами измерения
*/
/*
тут переменным нужно присвоить разные единицы измерения и произвести расчеты, 
поэтому мы ставим # { $ перемнная } единицы измерения. Мы могли бы оставить конструкцию 
# { $перемнная }единицы измерения только для центральной части, но тогда min и max 
у нас будут с px, а центральное значеие с vwpx. В итоге мы это испоьзуем,
чтобы задать единицы измерения конкретной переменной, кторая будет вводится 
просто числом. КОРОЧЕ, ЗАПОМНИ, ЧТО ЭТО ДЕЛЕТСЯ ТАК
*/
:root {
  --color-dark: #191A23;
  --color-dark-alt: #292A32;
  --color-light: #ffffff;
  --color-accent: #B9FF66;
  --color-grey: #F3F3F3;
  --color-grey-alt: #898989;
  --border: 1px solid var(--color-dark);
  --border-radius: 14px;
  --border-radius-small: 7px;
  --border-radius-large: 45px;
  --shadow: 0 5px 0 0 var(--color-dark);
  --font-family-base: "Space Grotesk", sans-serif;
  --container-width: 1240px;
  --container-padding-x: 20px; /*Значение в мобильной версии*/
  --section-padding-y: 70px; /*между секциями по макету 140, это по 70px снизу одной секции и сверху другой*/
  --input-height: 59px;
  --button-height: 68px;
  --transition-duration: 0.2s;
}
@media (max-width: 1280px) {
  :root {
    --section-padding-y: 50px;
  }
}
@media (max-width: 767px) {
  :root {
    --section-padding-y: 30px;
  }
}

.container {
  max-width: calc(var(--container-width) + var(--container-padding-x) * 2);
  margin-inline: auto;
  padding-inline: var(--container-padding-x);
}

.visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  margin: -1px !important;
  border: 0 !important;
  padding: 0 !important;
  white-space: nowrap !important;
  -webkit-clip-path: inset(100%) !important;
          clip-path: inset(100%) !important;
  clip: rect(0 0 0 0) !important;
  overflow: hidden !important;
}

@media (max-width: 767px) {
  .hidden-mobile {
    display: none !important;
  }
}

@media (min-width: 768px) {
  .visible-mobile {
    display: none !important;
  }
}

body {
  font-size: clamp(16px, 1.25vw, 18px);
  font-family: var(--font-family-base);
  font-weight: 400;
  line-height: 1.28;
  color: var(--color-dark);
  background-color: var(--color-light);
}

a,
input,
button,
textarea,
svg * {
  transition-duration: var(--transition-duration);
}

a {
  text-decoration: none;
  color: inherit;
}

h1, h2, h3, h4 {
  font-weight: 500;
}

/*Смотрим значения по макету, max - это для десктопной версии, min - для мобильной*/
h1 {
  font-size: clamp(43px, 4.1666666667vw, 60px);
}

h2 {
  font-size: clamp(36px, 2.7777777778vw, 40px);
}

h3 {
  font-size: clamp(26px, 2.0833333333vw, 30px);
}

h4, .h4 {
  /*В макете есть заголовки h3 c таким размеров, 
  поэтому мы сделаем еще и класс для добавления в разметку а не в стилях*/
  font-size: clamp(18px, 1.3888888889vw, 20px);
}

.field {
  --fieldInputHeight: var(--input-height);
  --fieldInputTextColor: var(--color-dark);
  --fieldInputBgColor: var(--color-light);
  --fieldInputBorderColor: var(--color-dark);
  --fieldInputPlaceholderColor: var(--color-grey-alt);
  --fieldInputHoverBgColor: var(--color-accent);
  display: flex;
  flex-direction: column;
  align-items: start;
  row-gap: 5px;
}
@media (max-width: 767px) {
  .field {
    row-gap: 10px;
  }
}
.field--big-height {
  --fieldInputHeight: var(--button-height);
}
.field--dark-bg {
  --fieldInputBgColor: var(--color-dark-alt);
  --fieldInputBorderColor: var(--color-light);
  --fieldInputPlaceholderColor: var(--color-light);
  --fieldInputHoverBgColor: var(--color-dark);
  --fieldInputTextColor: var(--color-accent);
}
.field__label {
  font-size: clamp(14px, 1.1111111111vw, 16px);
}
.field__input {
  width: 100%;
  height: var(--fieldInputHeight);
  color: var(--fieldInputTextColor);
  background-color: var(--fieldInputBgColor);
  padding-inline: 30px;
  padding-block: 18px;
  border: 1px solid var(--fieldInputBorderColor);
  border-radius: var(--border-radius);
}
@media (hover: hover) {
  .field__input:hover {
    background-color: var(--fieldInputHoverBgColor);
  }
}
@media (hover: none) {
  .field__input:active {
    background-color: var(--fieldInputHoverBgColor);
  }
}
@media (max-width: 767px) {
  .field__input {
    padding-inline: 20px;
  }
}
.field__input:focus {
  border-color: var(--color-accent);
  outline: none;
}
.field__input::-moz-placeholder {
  color: var(--fieldInputPlaceholderColor);
}
.field__input::placeholder {
  color: var(--fieldInputPlaceholderColor);
}
.field__input--textarea {
  height: 190px;
  resize: none;
}
@media (max-width: 767px) {
  .field__input--textarea {
    height: 132px;
  }
}

.radios {
  display: flex;
  -moz-column-gap: 35px;
       column-gap: 35px;
}

.radio {
  display: flex;
  align-items: center;
  -moz-column-gap: 14px;
       column-gap: 14px;
  transition-duration: var(--transition-duration);
}
@media (hover: hover) {
  .radio:hover {
    opacity: 0.6;
  }
}
@media (hover: none) {
  .radio:active {
    opacity: 0.6;
  }
}
.radio__input:not(:checked) + .radio__emulator::after {
  opacity: 0;
  /*селектор + выбирает следующий за ним (не вложенный в него) элемент*/
}
.radio__emulator {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 28px;
  aspect-ratio: 1;
  position: relative;
  background-color: var(--color-light);
  border: var(--border);
  border-radius: 50%;
}
.radio__emulator::after {
  position: absolute;
  top: 50%;
  left: 50%;
  translate: -50% -50%;
  width: 60%;
  aspect-ratio: 1;
  content: "";
  background-color: var(--color-accent);
  border-radius: inherit;
  transition-duration: var(--transition-duration);
}

.button {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  height: var(--button-height);
  padding-inline: 35px;
  font-size: 20px;
  color: var(--color-light);
  background-color: var(--color-dark);
  border-radius: var(--border-radius);
  border: var(--border);
}
@media (hover: hover) {
  .button:hover {
    color: var(--color-dark);
    background-color: var(--color-accent);
  }
}
@media (hover: none) {
  .button:active {
    color: var(--color-dark);
    background-color: var(--color-accent);
  }
}
.button--transparent {
  color: var(--color-dark);
  background-color: transparent;
}
.button--accent {
  background-color: var(--color-accent);
  color: var(--color-dark);
}
@media (hover: hover) {
  .button--accent:hover {
    background-color: var(--color-dark);
    color: var(--color-accent);
    border-color: var(--color-accent);
  }
}
@media (hover: none) {
  .button--accent:active {
    background-color: var(--color-dark);
    color: var(--color-accent);
    border-color: var(--color-accent);
  }
}

.grid {
  --gridColumns: 1;
  display: grid;
  grid-template-columns: repeat(var(--gridColumns), 1fr);
  gap: 40px;
}
@media (max-width: 767px) {
  .grid {
    gap: 30px;
  }
}
.grid--2 {
  --gridColumns: 2;
}
.grid--3 {
  --gridColumns: 3;
}
.grid--4 {
  --gridColumns: 4;
}
.grid--5 {
  --gridColumns: 5;
}
.grid--6 {
  --gridColumns: 6;
}
.grid--7 {
  --gridColumns: 7;
}
.grid--8 {
  --gridColumns: 8;
}
.grid--9 {
  --gridColumns: 9;
}
.grid--10 {
  --gridColumns: 10;
}
.grid--11 {
  --gridColumns: 11;
}
.grid--12 {
  --gridColumns: 12;
}
@media (max-width: 1023px) {
  .grid--2 {
    --gridColumns: 1;
  }
}
@media (max-width: 1280px) {
  .grid--3 {
    --gridColumns: 2;
  }
}
@media (max-width: 767px) {
  .grid--3 {
    --gridColumns: 1;
  }
}

.burger-button {
  padding: 0;
  background-color: transparent;
  border: none;
  width: 48px;
  aspect-ratio: 1;
  position: relative;
  border-radius: var(--border-radius-small);
}
@media (hover: hover) {
  .burger-button:hover {
    background-color: var(--color-accent);
  }
}
@media (hover: none) {
  .burger-button:active {
    background-color: var(--color-accent);
  }
}
.burger-button::after {
  position: absolute;
  top: 50%;
  left: 50%;
  translate: -50% -50%;
  content: "";
  width: 50%;
  height: 2px;
  background-color: var(--color-dark);
  border-radius: 5px;
  box-shadow: 0 -8px, 0 8px;
}

.header {
  padding-top: 60px;
}
@media (max-width: 1280px) {
  .header {
    padding-top: 30px;
  }
}
@media (max-width: 767px) {
  .header {
    padding-top: 15px;
  }
}
.header__inner {
  display: flex;
  justify-content: space-between;
  align-items: center;
  -moz-column-gap: 40px;
       column-gap: 40px;
}
@media (max-width: 1023px) {
  .header__inner {
    -moz-column-gap: 30px;
         column-gap: 30px;
  }
}
@media (max-width: 1023px) {
  .header__logo {
    max-width: 120px;
  }
}
@media (max-width: 767px) {
  .header__logo {
    max-width: 144px;
  }
}
.header__menu {
  margin-left: auto;
  font-size: 20px;
}
@media (max-width: 1280px) {
  .header__menu {
    font-size: 18px;
  }
}
@media (max-width: 1023px) {
  .header__menu {
    font-size: 16px;
  }
}
.header__menu-list {
  display: flex;
  align-items: center;
  -moz-column-gap: 40px;
       column-gap: 40px;
}
@media (max-width: 1280px) {
  .header__menu-list {
    -moz-column-gap: 20px;
         column-gap: 20px;
  }
}
.header__menu-link {
  position: relative;
  display: inline-flex;
  align-items: center;
  height: 48px;
}
@media (hover: hover) {
  .header__menu-link:hover::after {
    width: 100%;
  }
}
@media (hover: none) {
  .header__menu-link:active::after {
    width: 100%;
  }
}
.header__menu-link::after {
  content: "";
  position: absolute;
  top: 100%;
  left: 50%;
  /*Свойства выше выровняли элемент по центральной оси %-link 
  (спозиционировали относительно родителя), 
  но элемент получается как бы стоит справа от оси и получается, 
  что он стоит не совсем по центру, поэтому мы двигаем его влево 
  на 50 % его ширины (translate: -50%;) и тогда ось проходит четко 
  через его центр*/
  translate: -50%;
  width: 0;
  height: 2px;
  background-color: currentColor;
  transition-duration: inherit;
}
.header__button {
  height: 48px;
  padding-inline: 18px;
  font-size: 16px;
}

.cross-button {
  padding: 0;
  background-color: transparent;
  border: none;
  width: 48px;
  aspect-ratio: 1;
  position: relative;
  border-radius: var(--border-radius-small);
  /* Делаем крестик закрытия*/
}
@media (hover: hover) {
  .cross-button:hover {
    background-color: var(--color-accent);
  }
}
@media (hover: none) {
  .cross-button:active {
    background-color: var(--color-accent);
  }
}
.cross-button::before, .cross-button::after {
  content: "";
  position: absolute;
  top: 50%;
  left: 7px;
  width: 70%;
  height: 2px;
  background-color: var(--color-dark);
  border-radius: 5px;
}
.cross-button::before {
  rotate: 45deg;
}
.cross-button::after {
  rotate: -45deg;
}

.mobile-overlay {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 14px 20px;
  border: none;
  /*<dialog> у нас почему то не на весь экран. 
  Устраняем это с помощью пседвокласса :model характерного только для <dialog>*/
}
.mobile-overlay:modal {
  max-width: 100%;
  max-height: 100%;
}
.mobile-overlay__close-button-wrapper {
  display: flex;
  justify-content: end;
}
.mobile-overlay__list {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  row-gap: 30px;
  min-height: 80vh;
}

.section {
  padding-block: var(--section-padding-y);
}
.section__header {
  display: flex;
  align-items: center;
  -moz-column-gap: 40px;
       column-gap: 40px;
}
.section__header:not(:last-child) {
  margin-bottom: 80px;
}
@media (max-width: 767px) {
  .section__header:not(:last-child) {
    margin-bottom: 40px;
  }
}
@media (max-width: 767px) {
  .section__header {
    flex-direction: column;
    row-gap: 30px;
    text-align: center;
  }
}
.section__descriprion {
  max-width: 580px;
}

.hero {
  display: flex;
  flex-direction: column;
  row-gap: var(--section-padding-y);
}
@media (max-width: 1280px) {
  .hero {
    row-gap: 60px;
  }
}
.hero__main {
  display: flex;
  justify-content: space-between;
  align-items: start;
  -moz-column-gap: 30px;
       column-gap: 30px;
}
@media (max-width: 767px) {
  .hero__main {
    flex-direction: column;
  }
}
.hero__body {
  display: flex;
  align-items: start;
  flex-direction: column;
  row-gap: 35px;
  max-width: 531px;
  /*Нам нужно поместить изображение справа в мобильной версии 
  под заголовком h1, но нам мешает то, что это изображение не в блоке hero__body, 
  тогда мы применяем contents, что приведет к тому, что содержимое блока hero__body будет 
  выведено как обычно, но окружающий его блок (hero__body) будет полностью опущен,
  и на все элементы будут действовать свойства hero__main*/
}
@media (max-width: 767px) {
  .hero__body {
    display: contents;
  }
}
@media (max-width: 767px) {
  .hero__title {
    order: -2;
    /*Чем меньше значение order, тем раньше показан 
    flex-элемент. Значение по умолчанию 0.*/
    margin-bottom: 10px;
  }
}
.hero__description {
  font-size: 20px;
  line-height: 1.4;
}
@media (max-width: 767px) {
  .hero__description {
    margin-bottom: 40px;
  }
}
@media (max-width: 767px) {
  .hero__button {
    width: 100%;
    max-width: 390px;
    margin-inline: auto;
  }
}
.hero__partners-list {
  display: flex;
  justify-content: space-between;
  -moz-column-gap: 37px;
       column-gap: 37px;
}
@media (max-width: 1023px) {
  .hero__partners-list {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    row-gap: 20px;
    /*justify-content: space-evenly;
    align-items: end; - Эти свойства применятся к элемнтам <li>, а чтобы изображения в их 
    встали по центру - к <li> нужно пименить flex*/
  }
}
@media (max-width: 1023px) {
  .hero__partners-item {
    display: flex;
    justify-content: center;
  }
}
.hero__partners-image {
  filter: grayscale(1);
}
@media (max-width: 1023px) {
  .hero__image {
    max-width: 40%;
    height: auto;
  }
}
@media (max-width: 767px) {
  .hero__image {
    order: -1;
    /*Чем меньше значение order, тем раньше показан flex-элемент. Значение по умолчанию 0.*/
    max-width: 100%;
    /*Если к изображению применить свойство max-width: 100%, оно останется в границах 
    родительского элемента, даже если его изначальный размер больше. 
    Если же изображение изначально меньше родителя, данное свойство никак 
    на него не повлияет. То есть сейчас мы сделали элемент 100% зданой ему ширины*/
    width: 100%;
    /*А сейчас растянули его по ширине родителя*/
    margin-bottom: 20px;
  }
}

.puddle-bg {
  padding-inline: 7px;
  background-color: var(--color-accent);
  border-radius: var(--border-radius-small);
}
.puddle-bg--light {
  background-color: var(--color-light);
}

.services__list:not(:last-child) {
  margin-bottom: 100px;
}
@media (max-width: 767px) {
  .services__list:not(:last-child) {
    margin-bottom: 70px;
  }
}

.service-card {
  display: flex;
  justify-content: space-between;
  -moz-column-gap: 30px;
       column-gap: 30px;
  min-height: 310px;
  padding: 50px;
  background-color: var(--color-grey);
  border: var(--border);
  border-radius: var(--border-radius-large);
  box-shadow: var(--shadow);
}
@media (max-width: 767px) {
  .service-card {
    display: grid;
    /*Чтобы ширина колонок подстраивалась по ширину содержмиого*/
    grid-template-columns: auto auto;
    row-gap: 27px;
  }
}
.service-card--accent-bg {
  background-color: var(--color-accent);
}
.service-card--dark-bg {
  background-color: var(--color-dark);
}
.service-card__body {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  row-gap: 30px;
}
@media (max-width: 767px) {
  .service-card__body {
    display: contents;
  }
}
.service-card__image {
  align-self: center;
}
@media (max-width: 1280px) {
  .service-card__image {
    max-width: 50%;
    height: auto;
  }
}
@media (max-width: 767px) {
  .service-card__image {
    max-width: 165px;
  }
}
.service-card__title {
  display: flex;
  flex-direction: column;
  align-items: start;
}
@media (max-width: 767px) {
  .service-card__title {
    grid-column: -1/1;
  }
}
.service-card__link {
  --serviceCardLinkIconColor: var(--color-accent);
  display: inline-flex;
  align-items: center;
  -moz-column-gap: 15px;
       column-gap: 15px;
  font-size: 20px;
}
@media (hover: hover) {
  .service-card__link:hover {
    scale: 130%;
  }
}
@media (hover: none) {
  .service-card__link:active {
    scale: 130%;
  }
}
@media (max-width: 767px) {
  .service-card__link {
    align-self: end;
  }
}
.service-card__link--light {
  color: var(--color-light);
  --serviceCardLinkIconColor: var(--color-dark);
}
.service-card__link-icon-wrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 41px;
  aspect-ratio: 1;
  background-color: currentColor;
  border-radius: 50%;
}
.service-card__link-icon-wrapper svg {
  color: var(--serviceCardLinkIconColor);
}
@media (max-width: 767px) {
  .service-card__link-label {
    position: absolute !important;
    width: 1px !important;
    height: 1px !important;
    margin: -1px !important;
    border: 0 !important;
    padding: 0 !important;
    white-space: nowrap !important;
    -webkit-clip-path: inset(100%) !important;
            clip-path: inset(100%) !important;
    clip: rect(0 0 0 0) !important;
    overflow: hidden !important;
  }
}

.banner {
  --bannerImageOffSetY: 24px;
  padding-block: var(--bannerImageOffSetY);
}
@media (max-width: 1023px) {
  .banner {
    --bannerImageOffSetY: 0;
  }
}
.banner__inner {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: var(--color-grey);
  border-radius: var(--border-radius-large);
}
.banner__body {
  padding: 60px;
  display: flex;
  flex-direction: column;
  align-items: start;
  row-gap: 26px;
}
@media (max-width: 1023px) {
  .banner__body {
    padding: 50px;
  }
}
@media (max-width: 767px) {
  .banner__body {
    row-gap: 20px;
  }
}
.banner__description {
  max-width: 500px;
}
.banner__image {
  margin-block: calc(var(--bannerImageOffSetY) * -1);
}
@media (max-width: 1023px) {
  .banner__image {
    max-width: 40%;
    height: auto;
  }
}

.studies {
  /* Порядок медиазапросов тоже важен. Если мы в начале поставим desktop-above (min-width 1281px) то его свойства 
  padding не сработают, потому что mobile-above (min-width 768px), которое стоит ниже, а значит приоритет больше,
  распространится на все значения ширины включая (min-width 1281px) */
}
@media (min-width: 768px) {
  .studies {
    /*
    Тут мы применяем метод mobile-first чтобы эти свойства применялись
    с ширины 768px и выше (min-width 768px)
    */
    padding: 40px;
    color: var(--color-light);
    background-color: var(--color-dark);
    border-radius: var(--border-radius-large);
  }
}
@media (min-width: 1281px) {
  .studies {
    /*
    Тут мы применяем метод mobile-first чтобы эти свойства применялись
    с ширины 1281px и выше (min-width 1281px)
    */
    padding: 70px 60px;
  }
}
.studies__list {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
}
@media (max-width: 767px) {
  .studies__list {
    scroll-snap-type: x mandatory;
    overflow-x: scroll;
    width: 100vw;
    -moz-column-gap: 20px;
         column-gap: 20px;
  }
}
.studies__item {
  --studiesItemPaddingX: 64px;
  display: flex;
  flex-direction: column;
  row-gap: 20px;
}
@media (max-width: 1280px) {
  .studies__item {
    --studiesItemPaddingX: 32px;
  }
}
@media (min-width: 768px) {
  .studies__item:not(:first-child) {
    padding-left: var(--studiesItemPaddingX);
  }
  .studies__item:not(:last-child) {
    padding-right: var(--studiesItemPaddingX);
    border-right: 1px solid var(--color-light);
  }
}
@media (max-width: 767px) {
  .studies__item {
    min-width: 350px;
    padding: 42px 50px;
    color: var(--color-light);
    background-color: var(--color-dark);
    border-radius: var(--border-radius-large);
    scroll-snap-align: start;
  }
}
.studies__link {
  display: inline-flex;
  align-items: center;
  -moz-column-gap: 15px;
       column-gap: 15px;
  color: var(--color-accent);
  font-size: 20px;
  line-height: 1.4;
}
@media (hover: hover) {
  .studies__link:hover {
    scale: 130%;
    translate: 10%;
  }
}
@media (hover: none) {
  .studies__link:active {
    scale: 130%;
    translate: 10%;
  }
}

.process__list {
  display: flex;
  flex-direction: column;
  row-gap: 30px;
  counter-reset: custom-counter;
  /*Свойство counter-reset устанавливает переменную, в которой будет храниться 
  счётчик отображений определенного элемента, а также начальное значение счётчика.*/
  list-style: none;
}
@media (max-width: 767px) {
  .process__list {
    row-gap: 20px;
  }
}
.process__item {
  --counterContent: counter(custom-counter);
  counter-increment: custom-counter;
  /*
  Такой счётчик подсчитывает количество отображений элементов на странице и 
  может выводиться с помощью свойства content и псевдоэлементов ::after и ::before. 
  Это позволяет создавать списки (в том числе многоуровневые), в которых нумерация и вид 
  задаются через стили.*/
}
.process__item:nth-child(-n+9) {
  --counterContent: "0" counter(custom-counter);
}
.process__accordion {
  --indicatorVerticalRotate: 90deg;
  padding: 40px 60px;
  background-color: var(--color-grey);
  border: var(--border);
  border-radius: var(--border-radius-large);
  box-shadow: var(--shadow);
  transition-duration: var(--transition-duration);
}
@media (hover: hover) {
  .process__accordion:hover {
    background-color: var(--color-accent);
  }
}
@media (hover: none) {
  .process__accordion:active {
    background-color: var(--color-accent);
  }
}
@media (max-width: 767px) {
  .process__accordion {
    padding: 30px;
  }
}
.process__accordion[open] {
  background-color: var(--color-accent);
  /*/ .process__accordion-indicator::after{
       rotate: 0deg;
   } чтобы вот это все не писать мы создали переменную и ниже просто 
   переназначим ее*/
  --indicatorVerticalRotate: 0deg;
}
.process__accordion-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  -moz-column-gap: 50px;
       column-gap: 50px;
  cursor: pointer;
  -webkit-user-select: none;
     -moz-user-select: none;
          user-select: none;
}
@media (max-width: 767px) {
  .process__accordion-header {
    -moz-column-gap: 28px;
         column-gap: 28px;
  }
}
.process__accordion-title {
  font-size: clamp(18px, 2.0833333333vw, 30px);
  display: flex;
  align-items: center;
  -moz-column-gap: 25px;
       column-gap: 25px;
}
@media (max-width: 767px) {
  .process__accordion-title {
    -moz-column-gap: 33px;
         column-gap: 33px;
  }
}
.process__accordion-title::before {
  content: var(--counterContent);
  /*
  Выводим custom-counter в title.
  Благодаря перменной  --counterContent: кторой мы присвоили значения счетчика
  элементов counter(custom-counter), а птомом определили, что для первых элементов будет еще
  и '0' вначале --counterContent: '0' counter(custom-counter), 
  элементы с 10 не будут иметь 0 в начале.
  */
  font-size: 2em;
}
@media (max-width: 767px) {
  .process__accordion-title::before {
    font-size: 30px;
  }
}
.process__accordion-indicator {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 58px;
  aspect-ratio: 1;
  flex-shrink: 0;
  position: relative;
  background-color: var(--color-grey);
  border: var(--border);
  border-radius: 50%;
}
.process__accordion-indicator::before, .process__accordion-indicator::after {
  content: "";
  position: absolute;
  top: 50%;
  left: 50%;
  translate: -50% -50%;
  width: 45%;
  height: 10%;
  background-color: var(--color-dark);
}
.process__accordion-indicator::after {
  rotate: var(--indicatorVerticalRotate);
  transition-duration: var(--transition-duration);
}
@media (max-width: 767px) {
  .process__accordion-indicator {
    width: 30px;
  }
}
.process__accordion-body {
  margin-top: 30px;
  padding-top: 30px;
  border-top: var(--border);
}

.team {
  display: flex;
  flex-direction: column;
  row-gap: 40px;
}
.team__button {
  align-self: end;
  min-width: 269px;
}
@media (max-width: 480px) {
  .team__button {
    width: 100%;
  }
}

.team-card {
  padding: 40px 35px;
  border-radius: var(--border-radius-large);
  border: var(--border);
  box-shadow: var(--shadow);
  height: 100%;
}
@media (max-width: 767px) {
  .team-card {
    padding: 50px 40px;
  }
}
.team-card__header {
  display: flex;
  align-items: start;
}
.team-card__image:not(:last-child) {
  margin-right: 20px;
}
.team-card__info {
  align-self: end;
}
.team-card__info:not(:last-child) {
  margin-right: 10px;
}
.team-card__link {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 34px;
  aspect-ratio: 1;
  align-self: start;
  margin-left: auto;
  color: var(--color-accent);
  background-color: var(--color-dark);
  border-radius: 50%;
  flex-shrink: 0;
}
.team-card__name:not(:last-child) {
  margin-bottom: 3px;
}
.team-card__body {
  margin-top: 28px;
  padding-top: 28px;
  border-top: var(--border);
}
@media (max-width: 767px) {
  .team-card__body {
    margin-top: 20px;
    padding-top: 20px;
  }
}

.pagination__list {
  display: flex;
}
.pagination__button {
  padding: 0;
  background-color: transparent;
  border: none;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 24px;
  aspect-ratio: 1;
  color: var(--color-light);
}
@media (hover: hover) {
  .pagination__button:hover {
    color: var(--color-accent);
  }
}
@media (hover: none) {
  .pagination__button:active {
    color: var(--color-accent);
  }
}
.pagination__button.is-current {
  color: var(--color-accent);
}

.reviews {
  display: flex;
  flex-direction: column;
  row-gap: 110px;
  padding-top: 84px;
  padding-bottom: 54px;
  padding-inline: 30px;
  color: var(--color-light);
  background-color: var(--color-dark);
  border-radius: var(--border-radius-large);
}
@media (max-width: 1023px) {
  .reviews {
    padding-block: 50px;
    row-gap: 50px;
  }
}
.reviews__slider {
  --reviewsSliderSlideWidth: 606px;
}
@media (max-width: 1023px) {
  .reviews__slider {
    --reviewsSliderSlideWidth: 330px;
  }
}
.reviews__slider-list {
  display: flex;
  -moz-column-gap: 50px;
       column-gap: 50px;
  margin-inline: auto;
  scroll-snap-type: x mandatory;
  overflow-x: scroll;
}
.reviews__slider-list::-webkit-scrollbar {
  width: 0;
}
@media (max-width: 1023px) {
  .reviews__slider-list {
    -moz-column-gap: 30px;
         column-gap: 30px;
  }
}
.reviews__slider-item {
  scroll-snap-align: center;
  min-width: var(--reviewsSliderSlideWidth);
}
.reviews__actions {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  max-width: 564px;
  margin-inline: auto;
}
.reviews__arrow-button {
  padding: 0;
  background-color: transparent;
  border: none;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 48px;
  aspect-ratio: 1;
  color: var(--color-light);
}
@media (hover: hover) {
  .reviews__arrow-button:hover {
    color: var(--color-accent);
  }
}
@media (hover: none) {
  .reviews__arrow-button:active {
    color: var(--color-accent);
  }
}
.reviews__arrow-button[disabled] {
  color: var(--color-grey-alt);
  cursor: not-allowed;
}
.reviews__arrow-button svg {
  width: 20px;
  aspect-ratio: 1;
}

.review-card {
  /*Создаем переменные чтобы разместить footer четко под стрелкой (элемента ::after)*/
  --reviewCardCornerWidth: 40px;
  --reviewCardCornerOffsetLeft: 52px;
  display: flex;
  flex-direction: column;
  row-gap: 48px;
}
@media (max-width: 767px) {
  .review-card {
    --reviewCardCornerWidth: 29px;
    --reviewCardCornerOffsetLeft: 45px;
  }
}
@media (max-width: 767px) {
  .review-card {
    row-gap: 44px;
  }
}
.review-card__body {
  position: relative;
  border: 1px solid var(--color-accent);
  border-radius: var(--border-radius-large);
  padding: var(--reviewCardCornerOffsetLeft);
  /* Делаем уголок. Сначала сделаем квадрат, потом повернем его и обрежем с помощью clip-path (сгенерировать можно на сайте)*/
}
@media (max-width: 767px) {
  .review-card__body {
    padding: 30px;
  }
}
.review-card__body::after {
  width: var(--reviewCardCornerWidth);
  aspect-ratio: 1;
  content: "";
  position: absolute;
  top: 100%;
  left: var(--reviewCardCornerOffsetLeft);
  border: inherit;
  background-color: var(--color-dark);
  rotate: 45deg;
  -webkit-clip-path: polygon(100% 0, 0% 100%, 100% 100%);
          clip-path: polygon(100% 0, 0% 100%, 100% 100%);
  translate: 0 -50%;
}
.review-card__footer {
  display: flex;
  flex-direction: column;
  padding-left: calc(var(--reviewCardCornerOffsetLeft) + var(--reviewCardCornerWidth) / 2);
}
.review-card__name, .review-card__company {
  font-style: normal;
}
.review-card__name {
  color: var(--color-accent);
}

.contact-us {
  position: relative;
  overflow-x: hidden;
}
@media (min-width: 768px) {
  .contact-us {
    padding: 60px 100px 80px;
    background-color: var(--color-grey);
    border-radius: var(--border-radius-large);
  }
}
.contact-us::after {
  --contactUsImaheOffSetY: 62px;
  content: "";
  position: absolute;
  /*всегда absolute а у родителя relative потому что absolute спозиционируется 
  относительно ближайшего не static элемента */
  top: 50%;
  left: 100%;
  translate: -50% -50%;
  height: calc(100% - var(--contactUsImaheOffSetY) * 2);
  aspect-ratio: 1;
  background: url("../../images/form-image.svg") center/contain no-repeat;
}
@media (max-width: 1023px) {
  .contact-us::after {
    display: none;
  }
}
.contact-us__form, .contact-us__body {
  display: flex;
  flex-direction: column;
}
@media (max-width: 767px) {
  .contact-us__request-types, .contact-us__body {
    background-color: var(--color-grey);
  }
}
@media (max-width: 767px) {
  .contact-us__request-types {
    padding: 40px 52px 36px;
    border-radius: var(--border-radius-large) var(--border-radius-large) 0 0;
  }
}
@media (min-width: 1024px) {
  .contact-us__form {
    max-width: 556px;
  }
}
@media (min-width: 768px) {
  .contact-us__form {
    row-gap: 40px;
  }
}
.contact-us__body {
  row-gap: 25px;
}
@media (max-width: 767px) {
  .contact-us__body {
    margin-bottom: 30px;
    padding: 10px 30px 50px;
    border-radius: 0 0 var(--border-radius-large) var(--border-radius-large);
    row-gap: 20px;
  }
}

.soc1als__list {
  display: flex;
  -moz-column-gap: 20px;
       column-gap: 20px;
}
.soc1als__link {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  width: 30px;
  aspect-ratio: 1;
  color: var(--color-dark);
  background-color: var(--color-light);
  border-radius: 50%;
}
@media (hover: hover) {
  .soc1als__link:hover {
    background-color: var(--color-accent);
    scale: 130%;
  }
}
@media (hover: none) {
  .soc1als__link:active {
    background-color: var(--color-accent);
    scale: 130%;
  }
}
.soc1als__link svg {
  width: 50%;
  height: 50%;
}

.subscribe-form {
  padding: 58px 40px;
  display: flex;
  -moz-column-gap: 20px;
       column-gap: 20px;
  background-color: var(--color-dark-alt);
  border-radius: var(--border-radius);
  /* Задать все значения можно и так, но мы насоздавали переменных
  в блоке field, создали модификаторы field--drak-bg и field--big-height
  чтобы добавить их в разметку. На мой взгляд так проще. Посмотри сравни*/
  /*
      input {
          height: var(--button-height);
          background-color: var(--color-dark-alt);
          border: 1px solid var(--color-light);
          color: var(--color-accent);

          &::placeholder {
              color: var(--color-grey);
          }

          &:hover {
              background-color: var(--color-dark);
          }    
      }
  */
}
@media (max-width: 1280px) {
  .subscribe-form {
    flex-direction: column;
    row-gap: 22px;
    padding: 30px;
    width: 100%;
    max-width: 450px;
  }
}

@media (max-width: 767px) {
  .footer {
    padding-inline: 0;
  }
}
.footer__inner {
  padding: 55px 60px 50px;
  color: var(--color-light);
  background-color: var(--color-dark);
}
@media (min-width: 768px) {
  .footer__inner {
    border-radius: var(--border-radius-large) var(--border-radius-large) 0 0;
  }
}
@media (max-width: 767px) {
  .footer__inner {
    padding: 50px var(--container-padding-x) 30px;
    display: flex;
    flex-direction: column;
    align-items: center;
    row-gap: 37px;
  }
}
.footer__navigation {
  display: flex;
  align-items: center;
  justify-content: space-between;
  -moz-column-gap: 30px;
       column-gap: 30px;
}
@media (max-width: 1023px) {
  .footer__navigation {
    flex-direction: column;
    align-items: center;
    row-gap: 37px;
  }
}
@media (max-width: 767px) {
  .footer__navigation {
    display: contents;
  }
}
.footer__navigation:not(:last-child) {
  margin-bottom: 66px;
}
.footer__menu-list {
  display: flex;
  align-items: center;
  -moz-column-gap: 40px;
       column-gap: 40px;
}
@media (max-width: 767px) {
  .footer__menu-list {
    flex-direction: column;
    row-gap: 15px;
  }
}
.footer__menu-link {
  display: flex;
  align-items: center;
  height: 30px;
  text-decoration: underline;
}
@media (hover: hover) {
  .footer__menu-link:hover {
    color: var(--color-accent);
  }
}
@media (hover: none) {
  .footer__menu-link:active {
    color: var(--color-accent);
  }
}
.footer__soc1als {
  order: 1;
}
.footer__body {
  display: flex;
  justify-content: space-between;
  -moz-column-gap: 50px;
       column-gap: 50px;
}
@media (min-width: 768px) {
  .footer__body:not(:last-child) {
    margin-bottom: 50px;
    padding-bottom: 50px;
    border-bottom: 1px solid currentColor;
  }
}
@media (max-width: 767px) {
  .footer__body {
    flex-direction: column;
    row-gap: 37px;
  }
}
@media (max-width: 480px) {
  .footer__body {
    width: 100%;
  }
}
.footer__contacts {
  display: flex;
  flex-direction: column;
  align-items: start;
  row-gap: 27px;
}
@media (max-width: 767px) {
  .footer__contacts {
    align-items: center;
    text-align: center;
  }
}
.footer__contacts-title {
  color: var(--color-dark);
}
.footer__contacts-body {
  font-style: normal;
}
.footer__contacts-body p {
  --paragraphMarginBottom: 20px;
}
@media (hover: hover) {
  .footer__contacts-body a:hover {
    color: var(--color-accent);
  }
}
@media (hover: none) {
  .footer__contacts-body a:active {
    color: var(--color-accent);
  }
}
.footer__extra {
  display: flex;
  -moz-column-gap: 40px;
       column-gap: 40px;
}
@media (max-width: 767px) {
  .footer__extra {
    flex-direction: column;
    row-gap: 15px;
    align-items: center;
    order: 2;
    padding-top: 37px;
    border-top: 1px solid currentColor;
    width: 100%;
  }
}
.footer__extra a {
  text-decoration: underline;
}
@media (hover: hover) {
  .footer__extra a:hover {
    color: var(--color-accent);
  }
}
@media (hover: none) {
  .footer__extra a:active {
    color: var(--color-accent);
  }
}/*# sourceMappingURL=styles.css.map */